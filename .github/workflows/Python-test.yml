---
name: Python test
on:
  pull_request:
    branches:
      - "**"
    types:
      - opened
      - edited
      - reopened
    paths:
      - .github/workflows/Python-test.yml
      - app/**
      - cs-test/**
      - data/**
      - tests/**
      - .flake8
      - .pylintrc
      - .dockerignore
      - Dockerfile
      - .hadolint.yaml
  push:
    branches:
      - "**"
    paths:
      - .github/workflows/Python-test.yml
      - app/**
      - cs-test/**
      - data/**
      - tests/**
      - .flake8
      - .pylintrc
      - .dockerignore
      - Dockerfile
      - .hadolint.yaml

jobs:
  python-lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9.14  # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: x64  # optional x64 or x86. Defaults to x64 if not specified
          # cache: 'pip' # caching pip dependencies

      - name: Python Setup
        id: python-setup
        run: |
          if [ -f ./tests/requirements.txt ];
          then
            python -m pip install -r ./tests/requirements.txt
          fi

          if [ -f ./app/requirements.txt ];
          then
            python -m pip install -r ./app/requirements.txt
          fi

      - name: Python flake8 check
        id: python-flake8
        run: |
          flake8 ./tests/*.py
          flake8 ./app/*.py

      - name: Python Lint
        id: python-lint
        run: |
          pylint --rcfile ./.pylintrc ./app/*.py
          pylint --rcfile ./.pylintrc ./tests/*.py

  python-test:
    runs-on: ubuntu-22.04
    needs: python-lint
    services:
      mariadb:
        image: mariadb:10.9.3
        env:
          MYSQL_ROOT_PASSWORD: wEAzF#5VLE
          MYSQL_DATABASE: db1
          MYSQL_USER: dbuser
          MYSQL_PASSWORD: NY#xU8qfXM
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9.14  # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: x64  # optional x64 or x86. Defaults to x64 if not specified
          # cache: 'pip'  # caching pip dependencies
      - name: Python Setup
        id: python-setup
        run: |
          if [ -f ./app/requirements.txt ];
          then
            python -m pip install -r ./app/requirements.txt
          fi
      - name: Test DB connection
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: db1
          DB_USER: dbuser
          DB_PASSWORD: NY#xU8qfXM
        run: |
          mysql -h ${DB_HOST} -P ${DB_PORT} --database=${DB_NAME} --user=${DB_USER} --password=${DB_PASSWORD} -e "SHOW databases;"

      - name: Python test noDB
        id: python-test-nodb
        run: |
          python -m unittest tests.test_noDB
      - name: Python test DB
        id: python-test-db
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_NAME: db1
          DB_USER: dbuser
          DB_PASSWORD: NY#xU8qfXM
        run: |
          python -m unittest tests.test
  docker-build:
    runs-on: ubuntu-22.04
    needs: python-test
    steps:
      - uses: actions/checkout@v3
      - name: Get short-sha
        id: short-sha
        run: |
          SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Run hadolint
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: ./Dockerfile
          config: ./.hadolint.yaml
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push to local
        uses: docker/build-push-action@v3
        with:
          push: false
          load: true
          tags: "andreyasoskovwork/cat-app:${{ env.short_sha }}"
      - name: Run container structure test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 && chmod +x container-structure-test-linux-amd64 && sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          container-structure-test test --image "andreyasoskovwork/cat-app:${{ env.short_sha }}" --config ./cs-test/config.yaml
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "andreyasoskovwork/cat-app:${{ env.short_sha }}"
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
      - name: Build and push to remote
        uses: docker/build-push-action@v3
        with:
          push: true
          load: false
          tags: "andreyasoskovwork/cat-app:${{ env.short_sha }}"
      - name: Save docker image to tarball
        run: |
          docker save andreyasoskovwork/cat-app:"${{ env.short_sha }}" -o andreyasoskovwork-cat-app_"${{ env.short_sha }}".tar
      - uses: actions/upload-artifact@v3
        with:
          name: "andreyasoskovwork-cat-app_${{ env.short_sha }}.tar"
          path: "andreyasoskovwork-cat-app_${{ env.short_sha }}.tar"
          retention-days: 5
